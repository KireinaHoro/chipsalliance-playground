From 8754de46df996c19d96c12c841e5e965c3de54fd Mon Sep 17 00:00:00 2001
From: Jiuyang Liu <liu@jiuyang.me>
Date: Sat, 19 Jun 2021 19:10:51 +0800
Subject: [PATCH] If exist protoc in the $PATH, prefer to using it.

---
 build.sc | 148 ++++++++++++++++++++++++++++++++++---------------------
 1 file changed, 93 insertions(+), 55 deletions(-)

diff --git a/build.sc b/build.sc
index 094dc0bb8a..1d25078b29 100644
--- a/build.sc
+++ b/build.sc
@@ -91,21 +91,47 @@ class firrtlCrossModule(val crossScalaVersion: String) extends CrossSbtModule wi
     millSourcePath / "src" / "main" / "antlr4" / "FIRRTL.g4"
   }
 
-  def downloadAntlr4Jar = T.persistent {
-    if (!os.isFile( T.ctx.dest / "antlr4" ))
-      Util.download(s"https://www.antlr.org/download/antlr-$antlr4Version-complete.jar", os.rel / "antlr4")
-    PathRef(T.ctx.dest / "antlr4")
+  def downloadAntlr4 = T.persistent {
+    // Linux distro package antlr4 as antlr4, while brew package as antlr
+    PathRef(Seq("antlr4", "antlr")
+    .flatMap(f => os.proc("bash", "-c", s"command -v $f")
+      .call(check=false)
+      .out
+      .lines
+      .headOption
+    ).headOption match {
+      case Some(bin) => 
+        println(s"Use system antlr4: $bin")
+        os.Path(bin)
+      case None =>
+        println("Download antlr4 from Internet")
+        if (!os.isFile( T.ctx.dest / "antlr4" ))
+          Util.download(s"https://www.antlr.org/download/antlr-$antlr4Version-complete.jar", os.rel / "antlr4.jar")
+        T.ctx.dest / "antlr4.jar"
+    })
   }
 
   def generatedAntlr4Source = T.sources {
-    os.proc("java",
-      "-jar", downloadAntlr4Jar().path.toString,
-      "-o", T.ctx.dest.toString,
-      "-lib", antlrSource().path.toString,
-      "-package", "firrtl.antlr",
-      "-no-listener", "-visitor",
-      antlrSource().path.toString
-    ).call()
+    downloadAntlr4().path match {
+      case f if f.last == "antlr4.jar" =>
+        os.proc("java",
+          "-jar", f.toString,
+          "-o", T.ctx.dest.toString,
+          "-lib", antlrSource().path.toString,
+          "-package", "firrtl.antlr",
+          "-no-listener", "-visitor",
+          antlrSource().path.toString
+        ).call()
+      case _ => 
+        os.proc(downloadAntlr4().path.toString,
+          "-o", T.ctx.dest.toString,
+          "-lib", antlrSource().path.toString,
+          "-package", "firrtl.antlr",
+          "-no-listener", "-visitor",
+          antlrSource().path.toString
+        ).call()
+    }
+
     T.ctx.dest
   }
 
@@ -123,50 +149,62 @@ class firrtlCrossModule(val crossScalaVersion: String) extends CrossSbtModule wi
     System.getProperty("os.name")
   }
 
+  // For Mac users:
+  // MacOS ARM 64-bit supports native binaries via brew:
+  // you can install protoc via `brew install protobuf`,
+  // If you don't use brew installed protoc
+  // It still supports x86_64 binaries via Rosetta 2
+  // install via `/usr/sbin/softwareupdate --install-rosetta --agree-to-license`.
   def downloadProtoc = T.persistent {
-    val isMac = operationSystem().toLowerCase.startsWith("mac")
-    val isLinux = operationSystem().toLowerCase.startsWith("linux")
-    val isWindows = operationSystem().toLowerCase.startsWith("win")
-
-    val aarch_64 = architecture().equals("aarch64") | architecture().startsWith("armv8")
-    val ppcle_64 = architecture().equals("ppc64le")
-    val s390x = architecture().equals("s390x")
-    val x86_32 = architecture().matches("^(x8632|x86|i[3-6]86|ia32|x32)$")
-    val x86_64 = architecture().matches("^(x8664|amd64|ia32e|em64t|x64|x86_64)$")
-
-    val protocBinary =
-      if (isMac)
-        // MacOS ARM 64-bit still supports x86_64 binaries via Rosetta 2
-        if (aarch_64 || x86_64) "osx-x86_64"
-        else throw new Exception("mill cannot detect your architecture of your Mac")
-      else if (isLinux)
-        if (aarch_64) "linux-aarch_64"
-        else if (ppcle_64) "linux-ppcle_64"
-        else if (s390x) "linux-s390x"
-        else if (x86_32) "linux-x86_32"
-        else if (x86_64) "linux-x86_64"
-        else throw new Exception("mill cannot detect your architecture of your Linux")
-      else if (isWindows)
-        if (x86_32) "win32"
-        else if (x86_64) "win64"
-        else throw new Exception("mill cannot detect your architecture of your Windows")
-      else throw new Exception("mill cannot detect your operation system.")
-
-    val unpackPath = os.rel / "unpacked"
-
-    val bin = if(isWindows)
-      T.ctx.dest / unpackPath / "bin" / "protoc.exe"
-    else
-      T.ctx.dest / unpackPath / "bin" / "protoc"
-
-    if (!os.exists(bin))
-      Util.downloadUnpackZip(
-        s"https://github.com/protocolbuffers/protobuf/releases/download/v$protocVersion/protoc-$protocVersion-$protocBinary.zip",
-        unpackPath
-      )
-    // Download Linux/Mac binary doesn't have x.
-    if (!isWindows) os.perms.set(bin, "rwx------")
-    PathRef(bin)
+    PathRef(os.proc("bash", "-c", "command -v protoc").call(check=false).out.lines.headOption match {
+      case Some(bin) =>
+        println(s"Use system protoc: $bin")
+        os.Path(bin)
+      case None =>
+        println("Download protoc from Internet")
+        val isMac = operationSystem().toLowerCase.startsWith("mac")
+        val isLinux = operationSystem().toLowerCase.startsWith("linux")
+        val isWindows = operationSystem().toLowerCase.startsWith("win")
+
+        val aarch_64 = architecture().equals("aarch64") | architecture().startsWith("armv8")
+        val ppcle_64 = architecture().equals("ppc64le")
+        val s390x = architecture().equals("s390x")
+        val x86_32 = architecture().matches("^(x8632|x86|i[3-6]86|ia32|x32)$")
+        val x86_64 = architecture().matches("^(x8664|amd64|ia32e|em64t|x64|x86_64)$")
+
+        val protocBinary =
+          if (isMac)
+            if (aarch_64 || x86_64) "osx-x86_64"
+            else throw new Exception("mill cannot detect your architecture of your Mac")
+          else if (isLinux)
+            if (aarch_64) "linux-aarch_64"
+            else if (ppcle_64) "linux-ppcle_64"
+            else if (s390x) "linux-s390x"
+            else if (x86_32) "linux-x86_32"
+            else if (x86_64) "linux-x86_64"
+            else throw new Exception("mill cannot detect your architecture of your Linux")
+          else if (isWindows)
+            if (x86_32) "win32"
+            else if (x86_64) "win64"
+            else throw new Exception("mill cannot detect your architecture of your Windows")
+          else throw new Exception("mill cannot detect your operation system.")
+
+        val unpackPath = os.rel / "unpacked"
+
+        val bin = if (isWindows)
+          T.ctx.dest / unpackPath / "bin" / "protoc.exe"
+        else
+          T.ctx.dest / unpackPath / "bin" / "protoc"
+
+        if (!os.exists(bin))
+          Util.downloadUnpackZip(
+            s"https://github.com/protocolbuffers/protobuf/releases/download/v$protocVersion/protoc-$protocVersion-$protocBinary.zip",
+            unpackPath
+          )
+        // Download Linux/Mac binary doesn't have x.
+        if (!isWindows) os.perms.set(bin, "rwx------")
+        bin
+    })
   }
 
   def generatedProtoSources = T.sources {
